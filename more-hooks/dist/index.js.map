{"version":3,"file":"index.js","sources":["../src/useOnMount.ts","../src/useAsync.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\n/**\n * A tiny hook that runs only during your components first render lifecycle. Remeber onComponentDidMount?.\n *\n * @param    {Function} method\n *\n * @return   {void}\n *\n * @example\n * const Component = () => {\n *   const [text, setText] = useState(\"\");\n * \n *   const fetch = async () => {\n *     const response = await myApi();\n *     setText(response);\n *   };\n * \n *   useOnMount(fetch);\n * \n *   return (\n *     <>\n *       {text && <p>Response text: {text}</p>}\n *       {!text && <Alert>Just mounted anew, hang on...</Alert>}\n *     </>\n *   );\n * };\n */\n\nconst useOnMount = (method: () => {}) =>\n  useEffect(() => {\n    method();\n  }, []);\n\nexport default useOnMount;\n","import { useCallback, useState } from \"react\";\nimport useOnMount from \"./useOnMount\";\n\n/**\n * A hook designed to simplify the handling of a asynchronous calls.\n *\n * @param    {() => Promise<T>} method\n *           the asynchronous method that this hook will call\n *\n * @return   {Object}\n *           response data, status information and callback method\n *\n * @example\n * const Component = () => {\n *   const { response, pending, success, error, call } = useAsync(fetchResource);\n *   return (\n *     <>\n *       {pending && <LoadingSpinner />}\n *       {error && <MyError error={error} />}\n *       {success && <SuccessMessage />}\n *       {!pending && response && <MyData data={response} />}\n *       <Button onClick={() => call()}>Fetch resource</Button>\n *     </>\n *   );\n * };\n */\n\nexport type UseAsyncResponse<R, A extends unknown[]> = {\n  response: R | undefined;\n  pending: boolean;\n  success: boolean;\n  error: unknown | null;\n  hasBeenCalled: boolean;\n  call: UseAsyncMethod<R | undefined, A>;\n};\n\nexport type UseAsyncMethod<R, A extends unknown[]> = {\n  (...args: A): Promise<R>;\n};\n\nexport type UseAsyncOptions<A extends unknown[]> =\n  | ImmediateSet<A>\n  | ImmediateNotSet;\n\ntype ImmediateSet<A extends unknown[]> = {\n  immediate: true;\n  immediateParams: A;\n};\n\ntype ImmediateNotSet = {\n  immediate: undefined | false;\n};\n\nconst useAsync = <R, A extends unknown[]>(\n  method: UseAsyncMethod<R, A>,\n  options?: UseAsyncOptions<A>\n): UseAsyncResponse<R, A> => {\n  const [response, setResponse] = useState<R>();\n  const [pending, setPending] = useState<boolean>(false);\n  const [success, setSuccess] = useState<boolean>(false);\n  const [error, setError] = useState<unknown | null>(null);\n  const [hasBeenCalled, setHasBeenCalled] = useState<boolean>(false);\n\n  const call = useCallback(async (...args: Parameters<typeof method>) => {\n    setHasBeenCalled(true);\n    setPending(true);\n    setSuccess(false);\n    setResponse(undefined);\n    setError(null);\n\n    try {\n      const response = await method(...args);\n      setResponse(response);\n      setSuccess(true);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setPending(false);\n      return response;\n    }\n  }, []);\n\n  useOnMount(() => {\n    if (options?.immediate) {\n      call(...options?.immediateParams);\n    }\n  });\n\n  return { response, pending, success, error, call, hasBeenCalled };\n};\n\nexport default useAsync;\n"],"names":["useOnMount","method","useEffect","useAsync","options","_a","useState","response","setResponse","_b","pending","setPending","_c","success","setSuccess","_d","error","setError","_e","hasBeenCalled","setHasBeenCalled","call","useCallback","_i","args","undefined","response_1","error_1","immediate","immediateParams"],"mappings":"okDA6BA,IAAMA,WAAa,SAACC,GAClB,OAAAC,gBAAU,WACRD,KACC,KCqBCE,SAAW,SACfF,EACAG,GAEM,IAAAC,EAA0BC,iBAAzBC,OAAUC,OACXC,EAAwBH,gBAAkB,GAAzCI,OAASC,OACVC,EAAwBN,gBAAkB,GAAzCO,OAASC,OACVC,EAAoBT,eAAyB,MAA5CU,OAAOC,OACRC,EAAoCZ,gBAAkB,GAArDa,OAAeC,OAEhBC,EAAOC,kBAAY,eAAO,aAAAC,mBAAAA,IAAAC,sIAC9BJ,GAAiB,GACjBT,GAAW,GACXG,GAAW,GACXN,OAAYiB,GACZR,EAAS,uBAGU,iCAAMhB,eAAUuB,kBAA3BE,EAAWrB,SACjBG,EAAYkB,GACZZ,GAAW,kCAEXG,EAASU,gBAGT,OADAhB,GAAW,MACJJ,0BAER,IAQH,OANAP,WAAW,WACLI,MAAAA,GAAAA,EAASwB,WACXP,eAAQjB,MAAAA,SAAAA,EAASyB,mBAId,CAAEtB,WAAUG,UAASG,UAASG,QAAOK,OAAMF"}