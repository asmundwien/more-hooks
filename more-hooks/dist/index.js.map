{"version":3,"file":"index.js","sources":["../src/useAsync.ts"],"sourcesContent":["import { useCallback, useState } from \"react\";\n\n/**\n * A hook designed to simplify the handling of a asynchronous calls.\n *\n * @param    {() => Promise<T>} method\n *           the asynchronous method that this hook will call\n *\n * @return   {Object}\n *           response data, status information and callback method\n *\n * @example\n * const Component = () => {\n *   const { data, pending, success, error, call } = useAsync(fetchResource);\n *   return (\n *     <>\n *       {pending && <LoadingSpinner />}\n *       {error && <MyError error={error} />}\n *       {success && <SuccessMessage />}\n *       {!pending && data && <MyData data={data} />}\n *       <Button onClick={() => call()}>Fetch resource</Button>\n *     </>\n *   );\n * };\n */\n\ninterface UseAsyncResponse<R, P extends unknown[]> {\n  data: R | undefined;\n  pending: boolean;\n  success: boolean;\n  error: unknown | null;\n  hasBeenCalled: boolean;\n  call: (...args: P) => Promise<R | undefined>;\n}\n\nconst useAsync = <R, A extends unknown[] = []>(\n  method: (...args: A) => Promise<R>\n): UseAsyncResponse<R, A> => {\n  const [data, setData] = useState<R>();\n  const [pending, setPending] = useState<boolean>(false);\n  const [success, setSuccess] = useState<boolean>(false);\n  const [error, setError] = useState<unknown | null>(null);\n  const [hasBeenCalled, setHasBeenCalled] = useState<boolean>(false);\n\n  const call = useCallback(async (...args: Parameters<typeof method>) => {\n    setHasBeenCalled(true);\n    setPending(true);\n    setSuccess(false);\n    setData(undefined);\n    setError(null);\n\n    try {\n      const response = await method(...args);\n      setData(response);\n      setSuccess(true);\n    } catch (error) {\n      setError(error);\n    } finally {\n      setPending(false);\n      return data;\n    }\n  }, []);\n\n  return { data, pending, success, error, call, hasBeenCalled };\n};\n\nexport default useAsync;\n"],"names":["useAsync","method","_a","useState","data","setData","_b","pending","setPending","_c","success","setSuccess","_d","error","setError","_e","hasBeenCalled","setHasBeenCalled","call","useCallback","_i","args","undefined","response","error_1"],"mappings":"okDAmCA,IAAMA,SAAW,SACfC,GAEM,IAAAC,EAAkBC,iBAAjBC,OAAMC,OACPC,EAAwBH,gBAAkB,GAAzCI,OAASC,OACVC,EAAwBN,gBAAkB,GAAzCO,OAASC,OACVC,EAAoBT,eAAyB,MAA5CU,OAAOC,OACRC,EAAoCZ,gBAAkB,GAArDa,OAAeC,OAEhBC,EAAOC,kBAAY,eAAO,aAAAC,mBAAAA,IAAAC,sIAC9BJ,GAAiB,GACjBT,GAAW,GACXG,GAAW,GACXN,OAAQiB,GACRR,EAAS,uBAGU,iCAAMb,eAAUoB,kBAA3BE,EAAWrB,SACjBG,EAAQkB,GACRZ,GAAW,kCAEXG,EAASU,gBAGT,OADAhB,GAAW,MACJJ,0BAER,IAEH,MAAO,CAAEA,OAAMG,UAASG,UAASG,QAAOK,OAAMF"}